(source identity)
(:keys {:test "thing" :t2 :thing2})
{:keys {:test "thing" :t2 :thing2}}
{:keys [test] {:test "thing"}}
(defn maptest [{:keys [test]}] test)
(maptest {:test :testval})
(maptest {:test :testval :test2 :testval2})
((juxt identity identity):test)
(defn operate
  [[op arity] coll]
  (apply conj ((juxt
                drop
                (comp (partial apply op) reverse take))
               arity coll)))
(operate [+ 2] [0 1 2 3 4 5])
(source triml)
(source trim)
(source clojure.string/triml)
(set "test")
(set '("test"))
(#{\0} "0124")
(#{\0} '(\0 \1 \2 \4))
(#{\0} \0)
(#{\0} \0 \1)
(drop-while #{\0} "0124")
(def <> test)
(identity test :test2)
(cons '(test) test)
(cons test '(test))
(cons :test '(test))
(cons :test '(:test))
(cons :last '(:first :second))
(conj :last '(:first :second))
(conj  '(:first :second) :last)
(apply str \a '(\b \c \d))
(apply str '(\b \c \d) \a)
(apply #(str %& %1) \a '(\b \c \d))
(str (apply str '(\b \c \d)) \e)
(ns test
        (:require [garden.def :refer [css]]
                  [garden.color :as color :refer [hsl rgb]]))
(ns test
        (:require [garden.def :refer [defstyles]]
                  [garden.color :as color :refer [hsl rgb]]))
(ns test
        (:require [garden.core :refer [css]]
                  [garden.color :as color :refer [hsl rgb]]))
(rgb)
(doc rgb)
(docs rgb)
(clojure.core/docs rgb)
(clojure.repl/doc rgb)
(clojure.repl/doc hsl)
(clojure.repl/doc color/hsv)
(clojure.repl/doc color/hex->hsl)
(color/hex->hsl 0x483D3F)
(color/hex->hsl "483D3F")
(color/hex->rgb "483D3F")
(color/rgb->hsl (color/hex->rgb "483D3F"))
(color/hex->hsl "0090EA")
["0090EA" "483D3F" "F4EBD9" "A39A92" "77685D"]
(map color/hex->hsl ["0090EA" "483D3F" "F4EBD9" "A39A92" "77685D"])
(println (map color/hex->hsl ["0090EA" "483D3F" "F4EBD9" "A39A92" "77685D"]))
(clojure.pprint/pprint (map color/hex->hsl ["0090EA" "483D3F" "F4EBD9" "A39A92" "77685D"]))
(2640/13)
(frac 2640/13)
(int 2640/13)
(*203 13)
(* 203 13)
100N
(type 100N)
(integer 100N)
(int 100N)
(ns test :require                  [garden.color :as color :refer [hsl rgb]]))
(ns test   [garden.color :as color :refer [hsl rgb]]))
(ns test   [garden.color :as color :refer [hsl rgb]])
(ns test (:require  [garden.color :as color :refer [hsl rgb]]))
(clojure.repl/docs color/hex-re)
(clojure.repl/doc color/hex-re)
(clojure.repl/doc color/hex->rgb)
(clojure.pprint/pprint (map color/hex->rgb ["0090EA" "483D3F" "F4EBD9" "A39A92" "77685D"]))
(use 'garden.units)
percent
(percent 10)
(rem 10)
